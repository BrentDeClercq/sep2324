{"version":3,"file":"forms-submit.mjs","sources":["../src/FormsSubmit.vue","../src/submit.js"],"sourcesContent":["<!--\n  - @copyright Copyright (c) 2021 Jonas Rittershofer <jotoeri@users.noreply.github.com>\n  -\n  - @author Jonas Rittershofer <jotoeri@users.noreply.github.com>\n  -\n  - @license AGPL-3.0-or-later\n  -\n  - This program is free software: you can redistribute it and/or modify\n  - it under the terms of the GNU Affero General Public License as\n  - published by the Free Software Foundation, either version 3 of the\n  - License, or (at your option) any later version.\n  -\n  - This program is distributed in the hope that it will be useful,\n  - but WITHOUT ANY WARRANTY; without even the implied warranty of\n  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  - GNU Affero General Public License for more details.\n  -\n  - You should have received a copy of the GNU Affero General Public License\n  - along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  -\n  -->\n\n<template>\n\t<NcContent app-name=\"forms\" :class=\"{'app-forms-embedded': isEmbedded}\">\n\t\t<Submit :form=\"form\"\n\t\t\t:public-view=\"true\"\n\t\t\t:share-hash=\"shareHash\"\n\t\t\t:is-logged-in=\"isLoggedIn\" />\n\t</NcContent>\n</template>\n\n<script>\nimport { subscribe, unsubscribe } from '@nextcloud/event-bus'\nimport { loadState } from '@nextcloud/initial-state'\nimport NcContent from '@nextcloud/vue/dist/Components/NcContent.js'\nimport Submit from './views/Submit.vue'\n\nexport default {\n\tname: 'FormsSubmit',\n\n\tcomponents: {\n\t\tNcContent,\n\t\tSubmit,\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tform: loadState('forms', 'form'),\n\t\t\tisLoggedIn: loadState('forms', 'isLoggedIn'),\n\t\t\tisEmbedded: loadState('forms', 'isEmbedded', false),\n\t\t\tshareHash: loadState('forms', 'shareHash'),\n\t\t}\n\t},\n\n\tdestroyed() {\n\t\tunsubscribe('forms:last-updated:set', this.emitSubmitMessage)\n\t},\n\n\tmounted() {\n\t\tif (this.isEmbedded) {\n\t\t\tsubscribe('forms:last-updated:set', this.emitSubmitMessage)\n\n\t\t\t// Communicate window size to parent window in iframes\n\t\t\tconst resizeObserver = new ResizeObserver(entries => {\n\t\t\t\tthis.emitResizeMessage(entries[0].target)\n\t\t\t})\n\t\t\tthis.$nextTick(() => resizeObserver.observe(document.querySelector('.app-forms-embedded form')))\n\t\t}\n\t},\n\n\tmethods: {\n\t\temitSubmitMessage(id) {\n\t\t\twindow.parent?.postMessage({\n\t\t\t\ttype: 'form-saved',\n\t\t\t\tpayload: {\n\t\t\t\t\tid,\n\t\t\t\t},\n\t\t\t}, '*')\n\t\t},\n\n\t\t/**\n\t\t * @param {HTMLElement} target Target of which the size should be communicated\n\t\t */\n\t\temitResizeMessage(target) {\n\t\t\tconst rect = target.getBoundingClientRect()\n\t\t\tlet height = rect.top + target.scrollHeight\n\t\t\tlet width = target.scrollWidth\n\n\t\t\t// When submitted the height and width is 0\n\t\t\tif (height === 0) {\n\t\t\t\ttarget = document.querySelector('.app-forms-embedded main .empty-content')\n\t\t\t\theight = target.getBoundingClientRect().top + target.scrollHeight\n\t\t\t\twidth = Math.max(target.scrollWidth, document.querySelector('.app-forms-embedded main header').scrollWidth)\n\t\t\t}\n\n\t\t\twindow.parent?.postMessage({\n\t\t\t\ttype: 'resize-iframe',\n\t\t\t\tpayload: {\n\t\t\t\t\twidth,\n\t\t\t\t\theight,\n\t\t\t\t},\n\t\t\t}, '*')\n\t\t},\n\t},\n}\n</script>\n","/**\n * @copyright Copyright (c) 2020 John Molakvoæ <skjnldsv@protonmail.com>\n *\n * @author John Molakvoæ <skjnldsv@protonmail.com>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nimport { translate, translatePlural } from '@nextcloud/l10n'\nimport Vue from 'vue'\n\nimport FormsSubmitRoot from './FormsSubmit.vue'\n\n// eslint-disable-next-line import/no-unresolved, n/no-missing-import\nimport 'vite/modulepreload-polyfill'\n\nVue.prototype.t = translate\nVue.prototype.n = translatePlural\n\nexport default new Vue({\n\tel: '#content',\n\t// eslint-disable-next-line vue/match-component-file-name\n\tname: 'FormsSubmitRoot',\n\trender: h => h(FormsSubmitRoot),\n})\n"],"names":["_sfc_main","NcContent","Submit","loadState","unsubscribe","subscribe","resizeObserver","entries","id","_a","target","height","width","Vue","translate","translatePlural","h","FormsSubmitRoot"],"mappings":";qRAqCA,MAAAA,EAAA,CACA,KAAA,cAEA,WAAA,CACA,UAAAC,EACA,OAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,KAAAC,EAAA,QAAA,MAAA,EACA,WAAAA,EAAA,QAAA,YAAA,EACA,WAAAA,EAAA,QAAA,aAAA,EAAA,EACA,UAAAA,EAAA,QAAA,WAAA,CACA,CACA,EAEA,WAAA,CACAC,EAAA,yBAAA,KAAA,iBAAA,CACA,EAEA,SAAA,CACA,GAAA,KAAA,WAAA,CACAC,EAAA,yBAAA,KAAA,iBAAA,EAGA,MAAAC,EAAA,IAAA,eAAAC,GAAA,CACA,KAAA,kBAAAA,EAAA,CAAA,EAAA,MAAA,CACA,CAAA,EACA,KAAA,UAAA,IAAAD,EAAA,QAAA,SAAA,cAAA,0BAAA,CAAA,CAAA,CACA,CACA,EAEA,QAAA,CACA,kBAAAE,EAAA,QACAC,EAAA,OAAA,SAAA,MAAAA,EAAA,YAAA,CACA,KAAA,aACA,QAAA,CACA,GAAAD,CACA,CACA,EAAA,IACA,EAKA,kBAAAE,EAAA,OAEA,IAAAC,EADAD,EAAA,sBAAA,EACA,IAAAA,EAAA,aACAE,EAAAF,EAAA,YAGAC,IAAA,IACAD,EAAA,SAAA,cAAA,yCAAA,EACAC,EAAAD,EAAA,sBAAA,EAAA,IAAAA,EAAA,aACAE,EAAA,KAAA,IAAAF,EAAA,YAAA,SAAA,cAAA,iCAAA,EAAA,WAAA,IAGAD,EAAA,OAAA,SAAA,MAAAA,EAAA,YAAA,CACA,KAAA,gBACA,QAAA,CACA,MAAAG,EACA,OAAAD,CACA,CACA,EAAA,IACA,CACA,CACA,8SC1EAE,EAAI,UAAU,EAAIC,EAClBD,EAAI,UAAU,EAAIE,EAEH,IAAIF,EAAI,CACtB,GAAI,WAEJ,KAAM,kBACN,OAAQG,GAAKA,EAAEC,CAAe,CAC/B,CAAC"}